name: notebook-pr
on:
  workflow_dispatch:
  pull_request:
    branches: main
    paths:
      - '**/*.ipynb'
      - .github/workflows/notebook-pr.yaml
      - .github/actions/setup-ci.yaml
      - 'environment.yml'
      - '**/requirements.txt'

env:
  NB_KERNEL: python
  NMA_REPO: course-content
  NMA_MAIN_BRANCH: main

jobs:

  process-notebooks:

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          persist-credentials: false
          fetch-depth: 0
          ref: ${{ github.head_ref }}

      - name: Get commit message
          run: |
            readonly local msg=$(git log -1 --pretty=format:"%s")
            echo "COMMIT_MESSAGE=$msg" >> $GITHUB_ENV
  
      - name: Set up Python (conda)
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: climatematch
          use-mamba: true

      - name: Set cache date
        run: echo "DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV

      - uses: actions/cache@v2
        with:
          path: /usr/share/miniconda3/envs/climatematch
          # This should create a key that looks like 'linux-64-conda-environment.yml-[HASH]-DATE'
          # Logic inspired by https://dev.to/epassaro/caching-anaconda-environments-on-github-actions-2d08
          key: ${{ format('linux-64-conda-environment.yml-{0}-{1}', hashFiles('environment.yml'), env.DATE )}}
        id: cache

      - name: Update environment
        if: ${{!contains(env.COMMIT_MESSAGE, 'skip ci') && steps.cache.outputs.cache-hit != 'true'}}
        run: mamba env update -n climatematch -f environment.yml
  
      - name: Install CI tools
        run: |
          BRANCH=`python -c 'import os, re; m = re.search(r"nmaci:([\w-]+)", os.environ["COMMIT_MESSAGE"]); print("main" if m is None else m.group(1))'`
          wget https://github.com/NeuromatchAcademy/nmaci/archive/refs/heads/$BRANCH.tar.gz
          tar -xzf $BRANCH.tar.gz
          pip install -r nmaci-$BRANCH/requirements.txt
          mv nmaci-$BRANCH/scripts/ ci/
          rm -r nmaci-$BRANCH
          rm -r $BRANCH.tar.gz
          echo ci/ >> .gitignore
  
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install jupyter-book==0.10.2 ghp-import
  
      - name: Install XKCD fonts
        run: |
          sudo apt-get update -yq
          sudo sh -c "echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | debconf-set-selections"
          sudo apt-get install msttcorefonts -qq
          rm -f $HOME/.matplotlib/fontList.cache

      - name: Get changed files
        if: "!contains(env.COMMIT_MESSAGE, 'skip ci')"
        id: changes
        uses: trilom/file-changes-action@v1.2.4
        with:
          output: " "

      - name: Process notebooks
        if: "!contains(env.COMMIT_MESSAGE, 'skip ci')"
        id: process_notebooks
        run: |
          branch=${{ github.event.pull_request.head.ref }}
          nbs="tutorials/*/*.ipynb"
          # python ci/process_notebooks.py $nbs
          # python ci/verify_exercises.py $nbs --c "$COMMIT_MESSAGE"
          # python ci/make_pr_comment.py $nbs --branch $branch --o comment.txt

      - name: Add PR comment
        if: "!contains(env.COMMIT_MESSAGE, 'skip ci')"
        uses: machine-learning-apps/pr-comment@1.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          path: comment.txt

      - name: Update READMEs
        if: "!contains(env.COMMIT_MESSAGE, 'skip ci')"
        # run: python ci/generate_tutorial_readmes.py

      - name: Remove unreferenced derivatives
        if: "!contains(env.COMMIT_MESSAGE, 'skip ci') && success()"
        run: |
          # python ci/find_unreferenced_content.py > to_remove.txt
          # if [ -s to_remove.txt ]; then git rm --pathspec-from-file=to_remove.txt; fi

      - name: Commit post-processed files
        if: "!contains(env.COMMIT_MESSAGE, 'skip ci') && success()"
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add '**/*.ipynb'
          git add '**/static/*.png'
          git add '**/solutions/*.py'
          git add '**/README.md'
          git diff-index --quiet HEAD || git commit -m "Process tutorial notebooks"

      - name: Push post-processed files
        if: "!contains(env.COMMIT_MESSAGE, 'skip ci') && success()"
        uses: ad-m/github-push-action@v0.6.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.head_ref }}
