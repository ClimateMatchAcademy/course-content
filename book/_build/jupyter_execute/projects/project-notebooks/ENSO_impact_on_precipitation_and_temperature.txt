# @title #**Project background** 
#This will be a short video introducing the content creator(s) and motivating the research direction of the template.
#The Tech team will add code to format and display the video

#Title: ENSO impact on precipitation & temperature

#Imports
#Reload again if failed

!pip install condacolab &> /dev/null        
import condacolab
condacolab.install()

# Install all packages in one call (+ use mamba instead of conda)
# hopefully this improves speed
!mamba install xarray-datatree intake-esm gcsfs xmip aiohttp cartopy nc-time-axis cf_xarray xarrayutils "esmf<=8.3.1" xesmf &> /dev/null
# For xesmf install we need to pin "esmf<=8.3.1". More context here: https://github.com/pangeo-data/xESMF/issues/246

import time
tic = time.time()

import intake
import numpy as np
import matplotlib.pyplot as plt
import xarray as xr
import xesmf as xe

from xmip.preprocessing import combined_preprocessing
from xarrayutils.plotting import shaded_line_plot

from datatree import DataTree
from xmip.postprocessing import _parse_metric

import cartopy.crs as ccrs

# Functions

col = intake.open_esm_datastore("https://storage.googleapis.com/cmip6/pangeo-cmip6.json") # open an intake catalog containing the Pangeo CMIP cloud data

def load_cmip6(source_id, variable_id, member_id, table_id ):
  cat = col.search(
    source_id=source_ids,
    variable_id= variable_id,
    member_id=member_id,
    table_id=table_id,
    grid_label='gn',
    experiment_id = ['historical', 'ssp585'],
    require_all_on = ['source_id']
  )

  kwargs = dict(
    preprocess=combined_preprocessing,
    xarray_open_kwargs=dict(use_cftime=True),
    storage_options={'token':'anon'}
   ) 
  cat.esmcat.aggregation_control.groupby_attrs = ['source_id', 'experiment_id']
  dt = cat.to_datatree(**kwargs)

  return dt

# pick your model
#reload again if failed
source_ids = 'CESM2'

dm_tas = load_cmip6(source_ids, 'tas', 'r4i1p1f1', 'Amon' )
dm_pr = load_cmip6(source_ids, 'pr', 'r4i1p1f1', 'Amon' )
dm_sst = load_cmip6(source_ids, 'tos', 'r4i1p1f1', 'Omon' )

#Load cell areas for computing means

cat_ocean_area = col.search(
    source_id=source_ids,
    variable_id='areacello',
    member_id='r4i1p1f1', #
    table_id='Ofx',
    grid_label='gn',
    experiment_id = ['historical'],
    require_all_on = ['source_id']
)
kwargs = dict(
    preprocess=combined_preprocessing,
    xarray_open_kwargs=dict(use_cftime=True),
    storage_options={'token':'anon'}
   ) 

cat_ocean_area.esmcat.aggregation_control.groupby_attrs = ['source_id', 'experiment_id']
dt_ocean_area = cat_ocean_area.to_datatree(**kwargs)

cat_atmos_area = col.search(
    source_id=source_ids,
    variable_id='areacella',
    member_id='r4i1p1f1', #
    table_id='fx',
    grid_label='gn',
    experiment_id = ['historical'],
    require_all_on = ['source_id']
)

cat_atmos_area.esmcat.aggregation_control.groupby_attrs = ['source_id', 'experiment_id']
dt_atmos_area = cat_atmos_area.to_datatree(**kwargs)

dt_ocean_with_area = DataTree()
dt_atmos_with_area = DataTree()

for model,subtree in dm_sst.items():
    metric_ocean = dt_ocean_area[model]['historical'].ds['areacello']
    dt_ocean_with_area[model] = subtree.map_over_subtree(_parse_metric,metric_ocean)

for model,subtree in dm_pr.items():
    metric_atmos = dt_atmos_area[model]['historical'].ds['areacella']
    dt_atmos_with_area[model] = subtree.map_over_subtree(_parse_metric,metric_atmos)

#SST
url = 'http://www.esrl.noaa.gov/psd/thredds/dodsC/Datasets/noaa.ersst.v5/sst.mnmean.nc'
do_sst = xr.open_dataset(url, drop_variables=['time_bnds'])

#Precipitation
!wget https://downloads.psl.noaa.gov/Datasets/cmap/enh/precip.mon.mean.nc
do_pr = xr.open_dataset('precip.mon.mean.nc')

#Air Temperature Anomalies
!wget https://downloads.psl.noaa.gov/Datasets/gistemp/combined/1200km/air.2x2.1200.mon.anom.comb.nc
do_tas = xr.open_dataset('air.2x2.1200.mon.anom.comb.nc')

# Code to print the shape, array names, etc of the dataset

%matplotlib inline

# select just a single model and experiment
hist_precip = dm_pr['CESM2']['historical'].ds.pr


fig, (ax_july2000) = plt.subplots(
    ncols=1, nrows=1,
    figsize=[12,6],
    subplot_kw={'projection':ccrs.Robinson()}
)

# plot a timestep for 2000
sst_July2000 = hist_precip.sel(time='2000-07').squeeze()
sst_July2000.plot(ax=ax_july2000, x='lon', y='lat', transform=ccrs.PlateCarree(), cmap='magma', robust=True)
ax_july2000.coastlines()
ax_july2000.set_title('July 2000')



plt.show()

hist_sst = dm_sst['CESM2']['historical'].ds.tos

fig = plt.figure(figsize=(12, 6))
ax = plt.axes(projection=ccrs.Robinson(central_longitude=180))
ax.coastlines()
ax.gridlines()
hist_sst.sel(time='2000-07').squeeze().plot(
    ax=ax, transform=ccrs.PlateCarree(), vmin=-2, vmax=30, cmap='coolwarm'
);

hist_sst

url = 'http://iridl.ldeo.columbia.edu/SOURCES/.Indices/.nino/.NCEP/.NINO34/dods'
nino34 = xr.open_dataset(url, decode_times=False)
